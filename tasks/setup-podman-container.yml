- name: Initialise Podman arguments
  set_fact:
    container_flags: "{{ container.flags|default('') }}"

- block:
    - name: Check the user existence
      user:
        name: "{{ container.user }}"
        state: present
      register: _user

    - name: Set user run storage directory
      set_fact:
        container_user_uid: "{{ _user.uid }}"
        run_dir: /run/user/{{ _user.uid }}
  when: container.user != 'root'

- block:
    - name: Set root run storage directory
      set_fact:
        container_user_uid: '0'
        run_dir: /var/run
  when: container.user == 'root'

- name: Check the container image
  podman_image:
    name: "{{ container.image }}"
    state: present
  async: 120
  poll: 5
  become: "{{ 'yes' if container.user == 'root' else 'no' }}"

- name: Set ports in container_flags
  set_fact:
    container_flags: "{{ container_flags }} -p={{ item }}"
  loop: "{{ container.ports|default([]) }}"

- name: Check the local device existence
  stat:
    path: "{{ item.hostPath }}"
  loop: "{{ container.devices|default([]) }}"
  register: check_devices

- name: Verify the device existence
  fail:
    msg: The device {{ item.item.hostPath }} does not exist
  loop: "{{ check_devices.results }}"
  when: not item.stat.exists

- name: Set devices in container_flags
  set_fact:
    container_flags: "{{ container_flags }} --device={{ item.name|default(item.hostPath) }}:{{ item.mountPath }}"
  loop: "{{ container.devices|default([]) }}"

- name: Check the local file existence
  stat:
    path: "{{ item.hostPath }}"
  when: item.name is not defined
  loop: "{{ container.volumes|default([]) }}"
  register: check_files

- name: Verify the local file existence
  fail:
    msg: The file/directory {{ item.item.hostPath }} does not exist
  loop: "{{ check_files.results }}"
  when:
    - item.stat is defined
    - not item.stat.exists

- name: List existing volumes
  command: podman volume list -q
  changed_when: false
  register: volume_list

- name: Create a volume
  command: podman volume create {{ item.name }}
  loop: "{{ container.volumes }}"
  when:
    - item.name is defined
    - item.name not in volume_list.stdout_lines

- name: Set volumes in container_flags
  set_fact:
    container_flags: "{{ container_flags }} --volume={{ item.name|default(item.hostPath) }}:{{ item.mountPath }}"
  loop: "{{ container.volumes|default([]) }}"

- name: Check the existence of the systemd container service unit
  stat:
    path: /etc/systemd/system/container-{{ container.name }}.service
  register: systemd_unit_file

- name: Configure the systemd container service unit
  template:
    src: container-service.j2
    dest: /etc/systemd/system/container-{{ container.name }}.service
    owner: root
    group: root
    mode: "0644"
  become: yes
  register: systemd_unit_file_content

- name: Ensure that the systemd container service is enabled and started
  systemd:
    name: container-{{ container.name }}.service
    enabled: yes
    state: started
  become: yes
  when: not systemd_unit_file.stat.exists

- name: Ensure that the systemd container service is restarted
  systemd:
    name: container-{{ container.name }}.service
    state: restarted
    daemon_reload: yes
  become: yes
  when:
    - systemd_unit_file.stat.exists
    - systemd_unit_file_content.changed
